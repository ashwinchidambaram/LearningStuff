print("Hello Wrold!")
setwd("~/github/LearningStuff/MachineLearning/Part 1 - Data Preprocessing")
# Importing the Dataset
dataset = read.csv('Data.csv')
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$age, FUN = function(x) mean (x, na.rm = TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
###### Data Preprocessing ########
# Importing the Dataset
dataset = read.csv('Data.csv')
# Taking Care of the Missing Data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
# Code Breakdown:
# What it's doing: Replacing the missing value in the column age by the mean of the column age itself
# By using '$' after the dataset name, we can select the column of interest
# dataset$Age                                                     => Modifying 'Age' column of dataset
# ifelse                                                          => Syntax: (test, condition TRUE , condition FALSE)
# is.na(dataset$Age)                                              => If there exists NaN field in 'Age' column of dataset
# ave(dataset$Age, FUN = function(x) mean (x, na.rm = TRUE))      => Compute average of which column of dataset, add function
# dataset$Age)                                                    => If value in column is not missing, return original
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding Categorical Data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
# Here we will be using the factor function, which will break down the categorical data into factors
# NOTE: using Function F1 will allow for lookup
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
install.packages('caTools')
library(caTools)
detach("package:caTools", unload = TRUE)
library(caTools)
detach("package:caTools", unload = TRUE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
# Create Test Set
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(training_set)
View(training_set)
View(training_set)
View(training_set)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(training_set)
View(training_set)
View(test_set)
View(dataset)
View(dataset)
